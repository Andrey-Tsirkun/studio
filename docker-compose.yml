version: '3'

services:
  nextjs:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        BUILDKIT_INLINE_CACHE: 1
    image: nextjs-strapi-boilerplate-nextjs
    volumes:
      - ./frontend:/app
      - nextjs_node_modules:/app/node_modules
      - nextjs_build_cache:/app/.next
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_STRAPI_API_URL=http://strapi:1337
      - WATCHPACK_POLLING=true
      - CHOKIDAR_USEPOLLING=true
    networks:
      - app-network
    depends_on:
      - strapi

  strapi:
    build:
      context: ./backend
      dockerfile: Dockerfile
      args:
        BUILDKIT_INLINE_CACHE: 1
    image: nextjs-strapi-boilerplate-strapi
    volumes:
      - ./backend:/app
      - strapi_node_modules:/app/node_modules
      - strapi_build_cache:/app/dist
    ports:
      - "1337:1337"
    environment:
      - NODE_ENV=development
      - DATABASE_CLIENT=postgres
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
      - DATABASE_NAME=strapi
      - DATABASE_USERNAME=strapi
      - DATABASE_PASSWORD=strapi
      - JWT_SECRET=${JWT_SECRET}
      - ADMIN_JWT_SECRET=${ADMIN_JWT_SECRET}
      - APP_KEYS=${APP_KEYS}
      - API_TOKEN_SALT=${API_TOKEN_SALT}
    networks:
      - app-network
    depends_on:
      - postgres

  postgres:
    image: postgres:15-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=strapi
      - POSTGRES_USER=strapi
      - POSTGRES_PASSWORD=strapi
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
  nextjs_node_modules:
  nextjs_build_cache:
  strapi_node_modules:
  strapi_build_cache: 